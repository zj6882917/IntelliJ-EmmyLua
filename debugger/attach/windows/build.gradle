apply plugin: 'assembler'
apply plugin: 'c'
apply plugin: 'cpp'
apply plugin: 'visual-studio'

def WINDOWS_KITS100 = "C:/Program Files (x86)/Windows Kits/10"
def WINDOWS_KITS81 = "C:/Program Files (x86)/Windows Kits/8.1"
def VS140COMNTOOLS = System.env['VS140COMNTOOLS']
def VS140COMNTOOLS_VC = "${VS140COMNTOOLS}/../../VC"

model {
    platforms {
        x86 {
            architecture "x86"
        }
        x64 {
            architecture "x86_64"
        }
    }
}
model {
    buildTypes {
        debug
        release
    }
}
model {
    components {
        arch(NativeExecutableSpec) {
            sources {
                cpp {
                    source {
                        srcDir "src/arch/"
                        include "*.cpp"
                    }
                    lib library:"Shared", linkage: 'static'
                }
            }
            binaries.all {
                linker.args "user32.lib", "imagehlp.lib"
            }
        }
        EasyHook(NativeLibrarySpec) {
            sources {
                cpp {
                    source {
                        srcDirs "src/EasyHookDll"
                        srcDirs "src/DriverShared"
                        include "**/*.cpp"
                    }
                    exportedHeaders {
                        srcDir "src/DriverShared"
                        srcDir "src/EasyHookDll"
                    }
                }
                c {
                    source {
                        srcDirs "src/EasyHookDll"
                        srcDirs "src/DriverShared"
                        include "**/*.c"
                    }
                    exportedHeaders {
                        srcDir "src/DriverShared"
                        srcDir "src/EasyHookDll"
                    }
                }
                binaries.all {
                    cppCompiler.define "_UNICODE"
                    cppCompiler.define "UNICODE"
                    cppCompiler.define "EASYHOOK_EXPORTS"
                    cCompiler.define "EASYHOOK_EXPORTS"
                    if (targetPlatform == platforms.x86) {
                        linker.args "Aux_ulib_x86.lib"
                    } else {
                        linker.args "Aux_ulib_x64.lib"
                    }
                    linker.args "psapi.lib"
                    linker.args "/LIBPATH:src/EasyHookDll"
                    sources {
                        platformAsm(AssemblerSourceSet) {
                            source {
                                srcDirs "src/DriverShared/ASM"
                                if (targetPlatform == platforms.x86) {
                                    include "HookSpecific_x86.asm"
                                } else {
                                    include "HookSpecific_x64.asm"
                                }
                            }
                        }
                    }
                }
            }
        }
        Shared(NativeLibrarySpec) {
            sources {
                cpp {
                    source {
                        srcDir "src/Shared"
                        include "*.cpp"
                    }
                    exportedHeaders {
                        srcDir "src/Shared"
                    }
                }
            }
            binaries.all {
                linker.args "user32.lib", "imagehlp.lib"
            }
        }
        Debugger(NativeExecutableSpec) {
            sources.cpp {
                source {
                    srcDir "src/Debugger/"
                    include "*.cpp"
                }
                lib library:"Shared", linkage: 'static'
            }
            binaries.all {
                linker.args "user32.lib", "imagehlp.lib", "Advapi32.lib"
            }
        }
        LuaInject(NativeLibrarySpec) {
            sources.cpp {
                source {
                    srcDir "src/LuaInject"
                    srcDir "src/third-party/libpe/libpe"
                    include "*.cpp"
                }
                exportedHeaders {
                    srcDir "src/third-party/libpe/libpe"
                    srcDir "libs/LuaPlus/include"
                }
                lib library:"Shared", linkage: 'static'
                lib library:"EasyHook", linkage: 'shared'
            }
            binaries.all {
                linker.args "/LIBPATH:src/libs/dbghelp/lib"
                linker.args "dbghelp.lib", "Psapi.lib", "Shell32.lib"
            }
        }

        all {
            targetPlatform "x86"
            targetPlatform "x64"
            sources {
                cpp {
                    exportedHeaders {
                        srcDir "${VS140COMNTOOLS_VC}/atlmfc/include"
                        srcDir "${WINDOWS_KITS100}/Include/10.0.10240.0/ucrt"
                        srcDir "${WINDOWS_KITS81}/Include/shared"
                    }
                }
                c {
                    exportedHeaders {
                        srcDir "${VS140COMNTOOLS_VC}/atlmfc/include"
                        srcDir "${WINDOWS_KITS100}/Include/10.0.10240.0/ucrt"
                        srcDir "${WINDOWS_KITS81}/Include/shared"
                    }
                }
            }
        }
    }

    binaries {
        all {
            if (targetPlatform == platforms.x86) {
                linker.args "/LIBPATH:${WINDOWS_KITS100}/Lib/10.0.10240.0/ucrt/x86"
                linker.args "/LIBPATH:${VS140COMNTOOLS_VC}/atlmfc/lib"
            } else {
                linker.args "/LIBPATH:${WINDOWS_KITS100}/Lib/10.0.10240.0/ucrt/x64"
                linker.args "/LIBPATH:${VS140COMNTOOLS_VC}/atlmfc/lib/amd64"
            }
            cppCompiler.args "/EHsc"
            cppCompiler.args "/FS"
            cppCompiler.args "/MTd"
            cCompiler.args "/MTd"
            
            cppCompiler.define "_MBCS"
            cppCompiler.define "_USRDLL"
            cppCompiler.define "_CRT_SECURE_NO_WARNINGS"
            cppCompiler.define "_SILENCE_STDEXT_HASH_DEPRECATION_WARNINGS"
            if (buildType == buildTypes.debug) {
                cppCompiler.args '/Zi'
                cppCompiler.define 'DEBUG'
                linker.args '/DEBUG'
            }
        }
        withType(SharedLibraryBinarySpec) {
            //if (toolChain in VisualCpp) {
                cppCompiler.define "_WINDLL"
                cppCompiler.define "DLL_EXPORT"
            //}
        }
    }
}

task buildProduct (dependsOn:build) {
    doLast {
        def x64Set = [
            linkDebuggerX64DebugExecutable,
            //linkArchX64DebugExecutable,
            linkEasyHookX64DebugSharedLibrary,
            linkLuaInjectX64DebugSharedLibrary]
        x64Set.each {
            def link = it
            copy {
                from link.outputs
                into '/build/x64'
                include '*.dll', '*.exe'
            }
        }
        def x86Set = [
            linkDebuggerX86DebugExecutable,
            //linkArchX86DebugExecutable,
            linkEasyHookX86DebugSharedLibrary,
            linkLuaInjectX86DebugSharedLibrary]
        x86Set.each {
            def link = it
            copy {
                from link.outputs
                into '/build/x86'
                include '*.dll', '*.exe'
            }
        }
    }
}